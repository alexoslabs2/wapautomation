---
- name: Prepare authenticator options for nginx
  ansible.builtin.set_fact:
    letsencrypt_opt_http_auth: "--nginx"
  when: letsencrypt_cert.http_auth | default(letsencrypt_http_auth) == 'nginx'

- name: Prepare cert name option
  ansible.builtin.set_fact:
    letsencrypt_opt_cert_name: "--cert-name {{ letsencrypt_cert.name }}"
  when: letsencrypt_cert.name is defined and letsencrypt_cert.name | length > 0

- name: Prepare optional test cert option
  ansible.builtin.set_fact:
    letsencrypt_opt_test_cert: "{{ letsencrypt_test | default(false) | ternary('--test-cert', '') }}"

- name: Prepare reuse-key option
  ansible.builtin.set_fact:
    letsencrypt_opt_reuse_key: "{{ letsencrypt_cert.reuse_key | default(letsencrypt_reuse_key) | ternary('--reuse-key', '') }}"

- name: Prepare allow-subset-of-names option
  ansible.builtin.set_fact:
    letsencrypt_opt_allow_subset_of_names: "{{ letsencrypt_cert.subset_names | default(letsencrypt_subset_names) | ternary('--allow-subset-of-names', '') }}"

- name: "Prepare post-hook options #1"
  ansible.builtin.set_fact:
    letsencrypt_opt_post_hook: "--post-hook '{{ letsencrypt_cert.post_hook }}'"
  when: letsencrypt_cert.post_hook is defined and letsencrypt_cert.post_hook | length > 0

- name: "Prepare post-hook options #2"
  ansible.builtin.set_fact:
    letsencrypt_opt_post_hook: "--post-hook 'systemctl restart {{ letsencrypt_cert.services | join(' ') }}'"
  when:
    - letsencrypt_cert.post_hook is not defined or letsencrypt_cert.post_hook | length == 0
    - letsencrypt_cert.services is defined and letsencrypt_cert.services | length > 0
    - letsencrypt_cert_use_post_hook_for_service_restart | default(true)
    - not letsencrypt_cert_use_deploy_hook_for_service_restart | default(false)

- name: "Prepare deploy-hook options #1"
  ansible.builtin.set_fact:
    letsencrypt_opt_deploy_hook: "--deploy-hook '{{ letsencrypt_cert.deploy_hook }}'"
  when: letsencrypt_cert.deploy_hook is defined and letsencrypt_cert.deploy_hook | length > 0

- name: "Prepare deploy-hook options #2"
  ansible.builtin.set_fact:
    letsencrypt_opt_deploy_hook: "--deploy-hook 'systemctl restart {{ letsencrypt_cert.services | join(' ') }}'"
  when:
    - letsencrypt_cert.deploy_hook is not defined or letsencrypt_cert.deploy_hook | length == 0
    - letsencrypt_cert.services is defined and letsencrypt_cert.services | length > 0
    - not letsencrypt_cert_use_post_hook_for_service_restart | default(true)
    - letsencrypt_cert_use_deploy_hook_for_service_restart | default(false)

- name: "Prepare renew-hook options"
  ansible.builtin.set_fact:
    letsencrypt_opt_renew_hook: "--renew-hook '{{ letsencrypt_cert.renew_hook }}'"
  when: letsencrypt_cert.renew_hook is defined and letsencrypt_cert.renew_hook | length > 0

- name: Register Let's Encrypt certificate with HTTP challenge
  ansible.builtin.command: >
    certbot 
    {{ letsencrypt_opt_http_auth | default() }}
    {{ letsencrypt_opt_cert_name | default() }}
    {{ letsencrypt_opt_test_cert | default() }}
    {{ letsencrypt_opt_reuse_key | default() }}
    {{ letsencrypt_cert.opts_extra | default(letsencrypt_opts_extra | default()) }}
    --domains {{ letsencrypt_cert.domains | join(',') }}
    --keep-until-expiring --expand
    {{ letsencrypt_opt_allow_subset_of_names | default() }}
    --non-interactive --agree-tos
    {{ letsencrypt_opt_post_hook | default() }}
    {{ letsencrypt_opt_deploy_hook | default() }}
    {{ letsencrypt_opt_renew_hook | default() }}
  when: letsencrypt_cert.challenge | default() == 'http' and
        letsencrypt_cert.domains is defined and
        letsencrypt_cert.domains | length > 0
  register: letsencrypt_reg_certbot_http
  changed_when: not "no action taken" in letsencrypt_reg_certbot_http.stdout

- name: Read in system users
  ansible.builtin.command: "cut -d: -f1 /etc/passwd"
  register: letsencrypt_reg_system_users
  changed_when: false

- name: Add users to letsencrypt system group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: letsencrypt
    append: yes
  with_items: "{{ letsencrypt_cert.users | default([]) }}"
  when: letsencrypt_cert.users is defined and
        letsencrypt_cert.users | length > 0 and
        item in letsencrypt_reg_system_users.stdout_lines | default([])

- name: Allow group
  when: letsencrypt_group | default(false)
  block:
    - name: Get information about private key
      ansible.builtin.stat:
        path: "{{ letsencrypt_directory }}/live/{{ letsencrypt_cert.name }}/privkey.pem"
      register: privkey

    - name: Ensure letsencrypt group can read private key
      ansible.builtin.file:
        path: "{{ privkey.stat.lnk_source | default(privkey.stat.path) }}"
        owner: root
        group: letsencrypt
        mode: '0640'
      when: privkey.stat.exists

